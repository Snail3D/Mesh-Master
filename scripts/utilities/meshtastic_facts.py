"""Curated Meshtastic facts for quick alert responses."""

from __future__ import annotations

_BASE_FACTS = [
    "Meshtastic firmware and the companion apps are open source on GitHub under the GPLv3 license.",
    "Meshtastic nodes exchange mesh messages using protobuf packets defined in mesh.proto.",
    "LoRa modem presets like LongFast and ShortFast adjust bandwidth, spreading factor, and coding rate for different ranges.",
    "The Meshtastic CLI command `meshtastic --info` prints firmware version, hardware model, and region settings.",
    "Run `meshtastic --nodes` to see every neighbor the radio has recently heard along with RSSI and SNR.",
    "`meshtastic --qr` generates a QR code so you can share your primary channel with a quick scan.",
    "Applying the LongFast preset with `meshtastic --ch-longfast` favors faster chats over absolute range.",
    "Set device owner names from the CLI using `meshtastic --set-owner` and `--set-owner-short`.",
    "Stationary relays can publish a fixed GPS location via `meshtastic --setlat` and `--setlon`.",
    "Channel URLs bundle a hashed AES key so only invited nodes can decrypt your mesh traffic.",
    "Mesh packets carry hop counts so routers do not repeat frames forever.",
    "You can change the hop limit with `meshtastic --set lora.hop_limit <value>` when tuning coverage.",
    "Router role keeps the radio awake to forward packets continuously.",
    "Client role lets battery nodes sleep aggressively between transmissions.",
    "Router-Client role balances forwarding with periodic naps for solar or battery relays.",
    "Tracker role keeps the GPS warm so position updates remain frequent and accurate.",
    "Sensor role focuses on telemetry publishing for environmental or power data.",
    "Meshtastic supports BLE, Wi-Fi, and USB serial transports for management.",
    "The Python CLI opens radios through `meshtastic.serial_interface.SerialInterface` when you pass `--port`.",
    "MQTT integration can mirror mesh messages to a broker for dashboards and automations.",
    "Use `meshtastic --request-position --dest !ID` to ask a neighbor for its latest coordinates.",
    "Channel indexes are zero-based: index 0 is the primary channel while 1-7 are secondary slots.",
    "Disable unused secondary channels via `meshtastic --ch-disable --ch-index <n>` to cut airtime.",
    "Exporting preferences with `meshtastic --export-config` saves a readable YAML file.",
    "Apply a YAML profile back to a node with `meshtastic --configure profile.yaml`.",
    "LongSlow presets aim for maximum distance while ShortFast trims airtime for urban hops.",
    "ShortFast modem presets are great for dense clusters that need quick message turnaround.",
    "`meshtastic --reboot-ota` reboots ESP32-based boards into their OTA bootloader firmware.",
    "`meshtastic --factory-reset` restores default channels while keeping BLE keys intact.",
    "Nodes maintain a neighbor table with last-heard timestamps, RSSI, and SNR for every peer.",
    "Position packets may include altitude above mean sea level when the data is available.",
    "Enable environmental telemetry by setting `module.telemetry.environment_measurement_enabled` to true.",
    "The store-and-forward plugin lets sleepy clients download missed messages when they reconnect.",
    "Range-test plugin reports SNR and RSSI so you can map coverage while walking or driving.",
    "Remote hardware plugin toggles remote GPIO pins with `meshtastic --gpio-wrb <pin> <state>`.",
    "Detection-sensor plugin can broadcast when a monitored GPIO changes state.",
    "Ambient lighting plugin shares color values for addressable LEDs at camp or events.",
    "GPS coordinates are stored as integers scaled by 1e-7 degrees inside protobuf packets.",
    "Fixed position mode disables GPS hardware while still advertising your chosen coordinates.",
    "Clear a fixed position with the simple `meshtastic --remove-position` command.",
    "You can connect over BLE from the CLI with `meshtastic --ble` and the advertised device name.",
    "A Wi-Fi TCP interface lets you run `meshtastic --host <ip>` for over-the-air management.",
    "Channel seeds generate unique encryption keys so eavesdroppers only hear gibberish.",
    "Channel URLs start with `https://meshtastic.org/d/#` when generated by the app or CLI.",
    "Nodes advertise both a long name and short name in the mesh neighbor list.",
    "Device metadata replies include manufacturer strings, firmware build numbers, and hardware IDs.",
    "Capture raw serial logs to a file with `meshtastic --seriallog output.log`.",
    "Mesh acknowledgments use ROUTING_APP packets so senders know a delivery succeeded.",
    "The CLI `--set` command accepts snake_case preference paths like `device.role` and `lora.modem_preset`.",
    "Home Assistant can listen to mesh traffic through the MQTT plugin or the REST gateway.",
    "Most ready-made Meshtastic boards pair an SX1262 LoRa chip with an MCU such as an nRF52 or ESP32.",
    "Adjust output power by setting `lora.tx_power` to match your regulatory limits.",
    "Region settings constrain channel frequencies so your node stays legal worldwide.",
    "US915 region profiles use the 902-928 MHz ISM band spread across multiple center frequencies.",
    "AU915 region templates follow the LoRaWAN channel plan for Australia and New Zealand.",
    "`meshtastic --show-fields owner,long_name` customizes the table when you list nodes.",
    "The CLI `--traceroute` command reveals which hops forward traffic to a chosen node.",
    "`meshtastic --request-telemetry` polls a neighbor for fresh power or environment stats on demand.",
    "Remote reboots work by running `meshtastic --dest !node --reboot` when the admin channel is shared.",
    "NRF52-based nodes enter DFU mode with the `meshtastic --enter-dfu` command.",
    "ESP32-based boards support OTA resets via `meshtastic --reboot-ota`.",
    "Factory reset preserves BLE pairings but clears channel preferences to defaults.",
    "Admin access requires that both nodes share the hidden admin channel for configuration writes.",
    "Channel definitions are synchronized over the admin channel so new nodes learn secondary slots automatically.",
    "Set `device.role ROUTER` on mains-powered relays to keep them awake for forwarding.",
    "Setting `power.is_power_saving false` prevents a node from entering deep sleep.",
    "`power.wait_bluetooth_secs` defines how long a node advertises BLE before sleeping.",
    "`power.ls_secs` configures the light-sleep window in power-saving mode.",
    "Disable BLE entirely by setting `bluetooth.enabled false` when you only need wired control.",
    "Enable Wi-Fi bridges by setting `network.wifi_enabled true` on ESP32 hardware.",
    "Each mesh packet carries a unique ID so duplicates can be suppressed by other nodes.",
    "Routing acknowledgments rely on PortNum.ROUTING_APP frames for negative or positive feedback.",
    "The Python API exposes `meshtastic.mesh_interface.MeshInterface` for custom automations.",
    "Use the CLI `--debug` flag to print raw protobuf traffic for troubleshooting.",
    "Enable the range-test plugin by setting `module.range_test.enabled true` in preferences.",
    "Read remote GPIO masks with `meshtastic --gpio-rd 0x10` when the remote hardware plugin is enabled.",
    "Messages longer than the configured chunk size are automatically split with a delay between chunks.",
    "RAK4631 boards combine an nRF52840 MCU with an SX1262 LoRa transceiver on the WisBlock platform.",
    "The RAK5005-O base board routes USB power and UART to the RAK4631 core.",
    "LILYGO T-Beam boards pair an ESP32 with an SX1262 radio and onboard GPS for tracking projects.",
    "Heltec V3 modules ship with an OLED so you can read status without a phone.",
    "Firmware 2.x supports LoRa bandwidths from 31.25 kHz up to 500 kHz depending on the modem preset.",
    "The store-and-forward plugin caches messages so sleeping nodes can fetch them later.",
    "Position broadcast cadence is controlled by `position.position_broadcast_secs`.",
    "Smart position broadcasts skip updates unless you move beyond `broadcast_smart_minimum_distance` meters.",
    "Set `position.gps_mode NOT_PRESENT` when your board lacks a GPS module to save power.",
    "When `power.measurement_enabled` is true, nodes report battery voltage and uptime in telemetry packets.",
    "Environment telemetry relies on sensors like the BME280 to send temperature, humidity, and pressure.",
    "`power.min_wake_secs` prevents a node from diving back into sleep immediately after activity.",
    "Set `bluetooth.fixed_pin` if you want a custom pairing code for BLE connections.",
    "The display config includes `display.screen_on_secs` to control how long OLED backlights stay awake.",
    "Compass orientation options in `display.compass_orientation` help align the UI with your physical mounting.",
    "Slash command `/motd` shows the message-of-the-day stored on the node.",
    "The CLI `/nodes` command prints SNR, RSSI, and last-heard stats right in your terminal.",
    "Emergency integrations can forward high priority alerts via MQTT, webhooks, or SMS when scripts hook them up.",
    "Nodes share their hardware capabilities through `supported_device.py`, so apps know which sensors are present.",
    "Channel admin packets distribute new channel keys to keep secondary channels in sync.",
    "AES-CTR encryption keeps mesh traffic confidential even when packets travel through third-party relays.",
    "The Meshtastic app can import channel URLs from text or QR images shared by other users.",
    "Router nodes respect `lora.ignore_incoming` toggles so you can isolate them for testing.",
    "The CLI supports text acknowledgments with the `--ack` flag when you send messages.",
    "ESP32 builds expose a REST API so you can query `/nodes` and `/messages` over Wi-Fi.",
    "Power plug-ins like INA219 voltage sensors report pack voltage over the telemetry port.",
    "`meshtastic --sendtext` defaults to broadcasting unless you also set `--dest` for a direct message.",
    "Traceroute packets include per-hop SNR readings so you can evaluate mesh quality.",
    "Nodes expose health metrics like queue depth and last-heard time on the `/healthz` endpoint in modern builds.",
    "Device UI config lets you flip or rotate the screen to match how the enclosure is mounted.",
    "You can share full multi-channel URLs with `meshtastic --qr-all` when you need to clone every slot.",
    "Setting `module.canned_message.allowed_input_sources` defines which buttons can trigger canned replies.",
    "Range-test results are visible in the mobile apps so you can review coverage after a walk.",
    "Store-and-forward servers replay buffered messages when a sleepy client reconnects and requests history.",
    "The admin channel commonly lives on index 1 so configuration commands stay separate from chat.",
    "`meshtastic --device-metadata` prints manufacturer firmware bundle identifiers.",
    "`meshtastic --reset-nodedb` clears the neighbor database so discovery starts fresh.",
    "`meshtastic --ch-add` lets you append a new secondary channel from a shared URL.",
    "`meshtastic --ch-set-url` replaces the primary channel with fresh information encoded in a URL.",
    "Messages are chunked into at most five parts when you keep the default chunk limit.",
    "Setting `module.store_forward.is_server true` turns a node into a message cache for the mesh.",
    "Store-and-forward history downloads are requested with `meshtastic --set module.store_forward.records <count>`.",
    "GPS position packets carry both timestamp and fix quality so you can judge the reading.",
    "`meshtastic --sendtext` honors `--private` to use the PRIVATE_APP port for encrypted direct messages.",
]

_INTROS = [
    "Did you know",
    "Mesh fact",
    "Radio tidbit",
    "LoRa trivia",
    "Mesh tip",
]


def generate_meshtastic_facts(total: int = 1000) -> list[str]:
    facts: list[str] = []
    base_len = len(_BASE_FACTS)
    intro_len = len(_INTROS)
    for idx in range(total):
        base = _BASE_FACTS[idx % base_len]
        intro = _INTROS[idx % intro_len]
        number = idx + 1
        if intro == "Did you know":
            facts.append(f"{intro}? #{number}: {base}")
        else:
            facts.append(f"{intro} #{number}: {base}")
    return facts

MESHTASTIC_ALERT_FACTS = generate_meshtastic_facts()

__all__ = ["MESHTASTIC_ALERT_FACTS"]
